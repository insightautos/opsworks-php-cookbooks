user <%= node['nginx']['user'] %><% if node['nginx']['user'] != node['nginx']['group'] %> <%= node['nginx']['group'] %><% end %>;
worker_processes  <%= node['nginx']['worker_processes'] %>;
<% if node['nginx']['daemon_disable'] -%>
daemon off;
<% end -%>
<% if node['nginx']['worker_rlimit_nofile'] -%>
worker_rlimit_nofile <%= node['nginx']['worker_rlimit_nofile'] %>;
<% end -%>

pid        <%= node['nginx']['pid'] %>;

events {
  worker_connections  <%= node['nginx']['worker_connections'] %>;
<% if node['nginx']['multi_accept'] -%>
  multi_accept on;
<% end -%>
<% if node['nginx']['event'] -%>
  use <%= node['nginx']['event'] %>;
<% end -%>
}

http {
  <% if node.recipe?('nginx::naxsi_module') %>
  include       <%= node['nginx']['dir'] %>/naxsi_core.rules;
  <% end %>

  include       <%= node['nginx']['dir'] %>/mime.types;
  default_type  application/octet-stream;

  <% if node['nginx']['server_tokens'] -%>
  server_tokens <%= node['nginx']['server_tokens'] %>;
  <% end -%>
  <% if (defined?@environment) && @environment['AUTO_SSL'] %>

  lua_shared_dict auto_ssl 50m;
  lua_shared_dict auto_ssl_settings 1m;
  resolver 8.8.8.8;
  init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()
    local driver  = require "luasql.mysql"
    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
    auto_ssl:set("redis", {
      host = "<%= @environment['SSL_REDIS_HOST'] %>"
    })

    auto_ssl:set("allow_domain", function(domain)
        <% if defined?@environment %>
        local env = driver.mysql()
        local normalizedDomain = domain:match("[%w%.]*%.(%w+%.%w+)")
        local con = env:connect("<%= @environment['CMS_PROD_DATABASE_TABLE'] %>", "<%= @environment['CMS_PROD_DATABASE_USER'] %>", "<%= @environment['CMS_PROD_DATABASE_PASS'] %>", "<%= @environment['CMS_PROD_DATABASE_SERVER'] %>")
        local cursor,errorString = con:execute(string.format([[SELECT host AS domain FROM cms_prod.websites WHERE production = 1 AND host LIKE '%%%s';]], normalizedDomain))
        local row = cursor:fetch ({}, "a")
        local allow_domain = false
        while row do
            local rowDomain = row.domain
            local databaseDomain = rowDomain:match("[%w%.]*%.(%w+%.%w+)")
            if normalizedDomain == databaseDomain then
                allow_domain = true
            end
            row = cursor:fetch (row, "a")
        end
        cursor:close()
        con:close()
        env:close()
        return allow_domain
        <% else %>
        return false
        <% end %>
    end)

    auto_ssl:init()
  }

  init_worker_by_lua_block {
    auto_ssl:init_worker()
  }


  server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
  }
    <% end %>

  sendfile <%= node['nginx']['sendfile'] %>;
  tcp_nopush on;
  tcp_nodelay on;

  <% if node['nginx']['keepalive'] == "on" %>
  keepalive_timeout  <%= node['nginx']['keepalive_timeout'] %>;
  <% end %>

  gzip  <%= node['nginx']['gzip'] %>;
  <% if node['nginx']['gzip'] == "on" %>
  gzip_http_version <%= node['nginx']['gzip_http_version'] %>;
  gzip_comp_level <%= node['nginx']['gzip_comp_level'] %>;
  gzip_proxied <%= node['nginx']['gzip_proxied'] %>;
  gzip_vary <%= node['nginx']['gzip_vary'] %>;
  <% if node['nginx']['gzip_buffers'] -%>
  gzip_buffers <%= node['nginx']['gzip_buffers'] %>;
  <% end -%>
  gzip_types <%= node['nginx']['gzip_types'].join(' ') %>;
  gzip_min_length  1000;
  gzip_disable     "MSIE [1-6]\.";
  <% end %>

  server_names_hash_bucket_size <%= node['nginx']['server_names_hash_bucket_size'] %>;
  types_hash_max_size <%= node['nginx']['types_hash_max_size'] %>;
  types_hash_bucket_size <%= node['nginx']['types_hash_bucket_size'] %>;
  <% if node['nginx']['proxy_read_timeout'] -%>
  proxy_read_timeout <%= node['nginx']['proxy_read_timeout'] %>;
  <% end -%>
  <% if node['nginx']['client_body_buffer_size'] -%>
  client_body_buffer_size <%= node['nginx']['client_body_buffer_size'] %>;
  <% end -%>
  <% if node['nginx']['client_max_body_size'] -%>
  client_max_body_size <%= node['nginx']['client_max_body_size'] %>;
  <% end -%>

  <% if node['nginx']['enable_rate_limiting'] -%>
  limit_req_zone $binary_remote_addr zone=<%= node['nginx']['rate_limiting_zone_name'] %>:<%= node['nginx']['rate_limiting_backoff'] %> rate=<%= node['nginx']['rate_limit'] %>;

  <% end -%>
  include <%= node['nginx']['dir'] %>/conf.d/*.conf;
  include <%= node['nginx']['dir'] %>/sites-enabled/*;

  log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$host" sn="$server_name" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" ul="$upstream_response_length" '
                        'cs=$upstream_cache_status' ;
  access_log  <%= node['nginx']['log_dir'] %>/access.log  main_ext;
  error_log  <%= node['nginx']['log_dir'] %>/error.log warn;

}
