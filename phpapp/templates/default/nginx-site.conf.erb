server {
    listen 80;
    <% if @environment['CATCHALL_HOSTS'] %>
    server_name _;
    <% else %>
    server_name <% @domains.each do |a| %><%= "#{a}" %> <% end %>;
    <% end %>

    location / {
        <% if defined?@environment['AUTO_SSL'] && @environment['AUTO_SSL'] %>
        return 301 https://$host$request_uri;
        <% end %>

        client_max_body_size 100M;
        proxy_pass http://127.0.0.1:<%= @port %>;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_cache_bypass 0;
        proxy_cache_bypass 0;
        proxy_read_timeout 600s;
        proxy_buffering off;
        proxy_request_buffering off;
        keepalive_timeout 0;
    }

    <% if defined?@environment['AUTO_SSL'] && @environment['AUTO_SSL'] %>
    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    <% end %>
}

<% if defined?@environment['AUTO_SSL'] && @environment['AUTO_SSL'] %>
server {
  listen 443 ssl;

  # Dynamic handler for issuing or returning certs for SNI domains.
  ssl_certificate_by_lua_block {
    auto_ssl:ssl_certificate()
  }

  # You must still define a static ssl_certificate file for nginx to start.
  #
  # You may generate a self-signed fallback with:
  #
  # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
  #   -subj '/CN=sni-support-required-for-valid-ssl' \
  #   -keyout /etc/ssl/resty-auto-ssl-fallback.key \
  #   -out /etc/ssl/resty-auto-ssl-fallback.crt
  ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
  ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

  location / {
      client_max_body_size 100M;
      proxy_pass http://127.0.0.1:<%= @port %>;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection '';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP  $remote_addr;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_cache_bypass 0;
      proxy_cache_bypass 0;
      proxy_read_timeout 600s;
      proxy_buffering off;
      proxy_request_buffering off;
      keepalive_timeout 0;
  }
}
<% end %>
